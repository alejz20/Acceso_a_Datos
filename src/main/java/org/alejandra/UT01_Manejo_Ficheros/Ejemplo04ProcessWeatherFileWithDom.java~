package org.actividadFichero;

import org.alejandra.ficheros.CityData;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

/**
 * Los métodos startElement(), endElement(), characters() se heredan de la clase AbstractHandler y
 * son típicamente propios del parser SAX.
 * SAX no construye un árbol de nodos en memoria como DOM, sino q dispara esos eventos a medida que analiza el XML linea por linea.
 *
 *
 * DOM, en cambio, analiza el XML completo y lo carga en memoria como una estructura de árbol,
 * permitiendo una manipulación directa de los elementos en cualquier parte del documento.
 */

//  src/main/resources/weather-data-modificado.xml


//  src/main/resources/city-weather-summary.xml
public class Ejemplo04ProcessWeatherFileWithDom {

    private static final File inputFile = new File("src/main/resources/weather-data-modificado.xml");

    private static final File outputFilePath = new File("src/main/resources/outDom/city-weather-summary.xml");

    public static void main(String[] args) {


        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            // parse the file
            Document document = builder.parse(inputFile);

            //Crear el mapa para almacenar datos de cada ciudad
            Map<String, CityData> cityDataMap = new HashMap<>();

            // Usar XPath para buscar los nodos de ciudad y estaciones
            XPathFactory xPathFactory = XPathFactory.newInstance();
            XPath xpath = xPathFactory.newXPath();


            // Obtenemos las ciudades
            NodeList cityNodes = (NodeList) xpath.evaluate("//city", document, XPathConstants.NODESET);

            for (int i = 0; i < cityNodes.getLength(); i++) {
                Element cityElement = (Element) cityNodes.item(i);
                String cityId = cityElement.getAttribute("id");
                String cityName = cityElement.getAttribute("name");


                CityData cityData = new CityData(cityId, cityName);

                // Obtenemos las estaciones
                NodeList cityStations = (NodeList) xpath.evaluate("station", cityElement, XPathConstants.NODESET);

                for (int j = 0; j < cityStations.getLength(); j++) {
                    Element stationElement = (Element) cityStations.item(j);

                    // Buscar todas las mediciones de temperatura, humedad y presión en cada periodo
                    NodeList measurements = (NodeList) xpath.evaluate("measurements/period", stationElement, XPathConstants.NODESET);

                    for (int k = 0; k < measurements.getLength(); k++) {
                        Element periodElement = (Element) measurements.item(k);

                        //Temperaturas
                        Element tempElement = (Element) xpath.evaluate("temperature", periodElement, XPathConstants.NODE);
                        if (tempElement != null) {
                            double maxTemp = Double.parseDouble(tempElement.getAttribute("max"));
                            double minTemp = Double.parseDouble(tempElement.getAttribute("min"));
                            cityData.addTemperature(maxTemp, minTemp);
                        }

                        //Obtenemos humedad
                        Node humidityNode = (Node) xpath.evaluate("humidity", periodElement, XPathConstants.NODE);
                        if (humidityNode != null) {
                            double humidity = Double.parseDouble(humidityNode.getTextContent());
                            cityData.addHumidity(humidity);
                        }

                        //Obtenemos presion
                        Node pressureNode = (Node) xpath.evaluate("pressure", periodElement, XPathConstants.NODE);
                        if (pressureNode != null) {
                            double pressure = Double.parseDouble(pressureNode.getTextContent());
                            cityData.addPressure(pressure);
                        }
                    }

                }

                cityDataMap.put(cityId, cityData);
            }
            // Generamos el nuevo XML
            createXML(cityDataMap, outputFilePath.getAbsolutePath());


        }catch (ParserConfigurationException | SAXException | IOException | XPathExpressionException e) {
            System.err.println("Error al procesar el archivo XML: " + e);
        }


    }


    private static void createXML(Map<String, CityData> cityDataMap, String outputFilePath) {
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document document = builder.newDocument();

            // Crear nodo raiz

            Element rootElement = document.createElement("cities-weather-summary");
            document.appendChild(rootElement);

            for (CityData cityData : cityDataMap.values()) {
                // Crear nodo de ciudad
                Element cityElement = document.createElement("city");
                cityElement.setAttribute("id", cityData.getId());
                cityElement.setAttribute("name", cityData.getName());
                rootElement.appendChild(cityElement);
                Element avgTempElement = document.createElement("average-temperature");

                // La media de la suma max + min
                Element avgElement = document.createElement("average-temperature");
                avgElement.setTextContent(String.format("%.2f", cityData.getAvgTemp()));
                avgElement.appendChild(avgTempElement);

                // El max
                Element maxElement = document.createElement("max");
                maxElement.setTextContent(String.format("%.2f", cityData.getAvgMaxTemp()));
                avgTempElement.appendChild(maxElement);

                // El min
                Element minElement = document.createElement("min");
                minElement.setTextContent(String.format("%.2f", cityData.getAvgMinTemp()));
                avgTempElement.appendChild(minElement);

                cityElement.appendChild(avgTempElement);

                // Humedad
                Element humidityElement = document.createElement("average-humidity");
                humidityElement.setTextContent(String.format("%.2f", cityData.getAvgHumidity()));
                cityElement.appendChild(humidityElement);

                // Presion
                Element pressureElement = document.createElement("average-pressure");
                pressureElement.setTextContent(String.format("%.2f", cityData.getAvgPressure()));
                cityElement.appendChild(pressureElement);

                rootElement.appendChild(cityElement);


            }

            // Guardar el documento en un archivo
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            DOMSource source = new DOMSource(document);
            StreamResult result = new StreamResult(new File(outputFilePath));
            transformer.transform(source, result);

            System.out.println("Archivo XML generado correctamente: " + outputFilePath);

        } catch (ParserConfigurationException | TransformerException e) {
            System.err.println("Error al crear el archivo XML: " + e.getMessage());
            e.printStackTrace();
        }
    }

}
